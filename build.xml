<?xml version="1.0" encoding="UTF-8"?>
<project name="WebLab3" default="build">
    <property file="build.properties"/>

    <path id="classpath">
        <fileset dir="${lib.dir}" includes="*.jar"/>
        <fileset dir="${main.dir}" includes="*.java"/>
    </path>

    <path id="classpath.test">
        <pathelement location="${junit}"/>
        <pathelement location="${hamcrest}"/>
        <pathelement location="${classes.dir}"/>
    </path>

    <!-- подключение моднейшего антконтриба-->
    <taskdef resource="net/sf/antcontrib/antcontrib.properties">
        <classpath>
            <pathelement location="${lib.dir}/ant-contrib-1.0b3.jar"/>
        </classpath>
    </taskdef>

<!--    <taskdef resource="org/apache/tools/ant/taskdefs/optional/ssh/antlib.xml">-->
<!--        <classpath>-->
<!--            <pathelement location="lib/ant-jsch-1.10.14.jar"/>-->
<!--            <pathelement location="lib/jsch-0.1.55.jar"/>-->
<!--        </classpath>-->
<!--    </taskdef>-->


    <!-- ВНИМАНИЕ ТАРГЕТЫ!!!-->
    <target name="clean">
        <echo message="====== CLEAN STARTED ======" />
        <delete dir="${ant.dir}"/>
        <delete dir="${junit.report.dir}"/>
        <echo message="====== CLEAN COMPLETED ======" />
    </target>

    <target name="compile" depends="clean">
        <echo message="====== COMPILE STARTED ======" />
        <mkdir dir="${classes.dir}"/>
        <mkdir dir="${test.classes.dir}"/>
        <javac srcdir="${src.dir}" destdir="${classes.dir}" classpathref="classpath" includeantruntime="false"/>
        <echo message="====== COMPILE COMPLETED ======"/>
    </target>

    <target name="build" depends="compile">
        <echo message="====== BUILD STARTED ======" />
        <copy todir="${build.dir}">
            <fileset dir="${web.dir}"/>
        </copy>
        <copy todir="${build.dir.lib}">
            <fileset dir="${lib.dir}"/>
        </copy>
        <copy todir="${classes.dir}">
            <fileset dir="${resources.dir}"/>
        </copy>

        <jar destfile="${ant.dir}/${ant.project.name}.jar">
            <fileset dir="${classes.dir}"/>
            <manifest>
                <attribute name="Created-By" value="GerGerich"/>
                <attribute name="Manifest-Version" value="1.0"/>
                <attribute name="Main-Class" value="NoClass"/>
            </manifest>
        </jar>

        <war destfile="${ant.dir}/${ant.project.name}.war" webxml="${build.web.xml}">
            <fileset dir="${build.dir}"/>
            <manifest>
                <attribute name="Created-By" value="GerGerich"/>
                <attribute name="Manifest-Version" value="1.0"/>
                <attribute name="Main-Class" value="NoClass"/>
            </manifest>
        </war>
        <echo message="====== BUILD COMPLETED ======" />
    </target>

    <target name="doc" depends="build">
        <echo message="====== DOC STARTED ======"/>
        <mkdir dir="${doc.dir}"/>
        <javadoc destdir="${doc.dir}" sourcepath="${main.dir}">
            <classpath>
                <fileset dir="${lib.dir}">
                    <include name="*.jar"/>
                </fileset>
                <pathelement path="${classes.dir}"/>
            </classpath>
        </javadoc>

        <checksum file="${ant.dir}/${ant.project.name}.jar" algorithm="MD5" property="md5.hash"/>
        <checksum file="${ant.dir}/${ant.project.name}.jar" algorithm="SHA-1" property="sha1.hash"/>

        <jar destfile="${ant.dir}/${ant.project.name}.jar">
            <fileset dir="${classes.dir}"/>
            <manifest>
                <attribute name="Created-By" value="GerGerich"/>
                <attribute name="Manifest-Version" value="1.0"/>
                <attribute name="Main-Class" value="NoClass"/>
                <attribute name="MD5-Checksum" value="${md5.hash}"/>
                <attribute name="SHA1-Checksum" value="${sha1.hash}"/>
            </manifest>
        </jar>
        <echo message="====== DOC COMPLETED ======"/>
    </target>

    <target name="test" depends="build">
        <echo message="====== TEST STARTED ======"/>
        <mkdir dir="${test.classes.dir}"/>
        <mkdir dir="${junit.report.dir}"/>
        <javac destdir="${test.classes.dir}" srcdir="${test.dir}" includeantruntime="false" encoding="utf-8">
            <classpath refid="classpath.test"/>
        </javac>
        <junit printsummary="on" haltonfailure="true" haltonerror="true" failureproperty="tests.failed">
            <classpath>
                <path refid="classpath.test"/>
                <pathelement location="${test.classes.dir}"/>
            </classpath>
            <batchtest fork="yes" todir="${junit.report.dir}">
                <formatter type="plain"/>
                <fileset dir="${test.dir}" includes="*Test.java"/>
            </batchtest>
        </junit>
        <echo message="====== TEST COMPLETED ======" />
    </target>

    <target name="report" depends="test">
        <if>
            <not>
                <isset property="tests.failed"/>
            </not>
            <then>
                <git-add/>
                <git-commit/>
            </then>
            <else>
                <echo message="tests failed. so, no reports" />
            </else>
        </if>
    </target>

    <target name="xml">
        <echo message="====== XML VALIDATION STARTED ======" />
        <xmlvalidate lenient="true" failonerror="true">
            <fileset dir="." includes="*.xml,**/*.xml"/>
            <fileset dir="${web.dir}/WEB-INF" includes="*.xml"/>
        </xmlvalidate>
        <echo message="====== XML VALIDATION COMPLETED ======"/>
    </target>

    <target name="scp" depends="build">
        <echo message="====== DEPLOY VIA SCP STARTED ======" />
<!--        <scp-->
<!--            todir="${scp.user}@${scp.host}:${scp.remote.dir}"-->
<!--            password="${scp.pass}"-->
<!--            trust="true">-->
<!--            <fileset dir="dist/**/*"/> &lt;!&ndash; TODO меняй&ndash;&gt;-->
<!--        </scp>-->
        <echo message="====== DEPLOY VIA SCP COMPLETED ======"/>
    </target>

    <target name="env" depends="clean">
        <echo message="====== ENV STARTED ======"/>
        <mkdir dir="${classes.dir}"/>
        <javac srcdir="${main.dir}" destdir="${classes.dir}" classpathref="classpath" source="${compile.version}"
               includeantruntime="false">
            <compilerarg line="${vm.args}"/>
        </javac>
        <antcall target="build"/>
        <antcall target="scp"/>
        <echo message="====== ENV COMPLETED ======"/>
    </target>

    <target name="history">
        <echo message="====== HISTORY STARTED ======"/>
        <trycatch>
            <try>
                <antcall target="compile" inheritAll="true"/>
                <echo message="last version is correct!"/>
            </try>
            <catch>
                <!-- ищем хешик первого коммита-->
                <exec executable="git" outputproperty="first.rev" failonerror="true">
                    <arg value="rev-list"/>
                    <arg value="--max-parents=0"/>
                    <arg value="HEAD"/>
                </exec>
                <property name="first.rev" value="${first.rev}.trim()"/>

                <property name="lastWorking" value=""/>
                <history-loop/>
            </catch>
        </trycatch>
        <echo message="====== HISTORY COMPLETED ======"/>
    </target>

    <!-- тут мои макродефики(мракобесики)-->
    <macrodef name="git-add">
        <sequential>
            <exec executable="git" dir="${git.repo.dir}">
                <arg value="add"/>
                <arg value="${junit.report.dir}/*.txt"/>
            </exec>
        </sequential>
    </macrodef>

    <macrodef name="git-commit">
        <sequential>
            <tstamp>
                <format property="commit.time" pattern="yyyy-MM-dd HH:mm:ss"/>
            </tstamp>
            <exec executable="git" dir="${git.repo.dir}">
                <arg value="commit"/>
                <arg value="-m"/>
                <arg value="JUnit Report ${commit.time}"/>
            </exec>
        </sequential>
    </macrodef>

    <macrodef name="history-loop">
        <sequential>
            <!-- получаем хешик текущего коммита -->
            <exec executable="git" outputproperty="current.rev" failonerror="true">
                <arg value="rev-parse"/>
                <arg value="HEAD"/>
            </exec>
            <property name="current.rev" value="${current.rev}.trim()"/>
            <echo message="current revision: ${current.rev}"/>

            <echo message="trying compile current revision..."/>
            <trycatch>
                <try>
                    <antcall target="compile"/>

                    <echo message="last working revision: ${current.rev}"/>
                    <property name="lastWorking" value="${current.rev}"/>

                    <echo message="generation diff between last working and next..."/>
                    <exec executable="bash" outputproperty="after.rev" failonerror="true">
                        <arg value="-c"/>
                        <arg value="git rev-list --reverse ${lastWorking}..HEAD | head -n 1 | tr -d '\n'"/>
                    </exec>

                    <exec executable="git" output="diff.txt" failonerror="true">
                        <arg value="diff"/>
                        <arg value="${lastWorking}"/>
                        <arg value="${after.rev}"/>
                    </exec>
                    <echo message="diffs saved to diff.txt."/>
                </try>
                <catch>
                    <if>
                        <equals arg1="${current.rev}" arg2="${first.rev}"/>
                        <then>
                            <echo message="NO WORKING COMMITS IN YOUR REPO"/>
                        </then>
                        <else>
                            <exec executable="git" failonerror="true">
                                <arg value="stash"/>
                                <arg value="push"/>
                                <arg value="-u"/>
                            </exec>
                            <echo message="checking out previous commit (HEAD~1)..."/>
                            <exec executable="git" failonerror="true">
                                <arg value="checkout"/>
                                <arg value="HEAD~1"/>
                            </exec>

                            <history-loop/>
                        </else>
                    </if>
                </catch>
            </trycatch>
        </sequential>
    </macrodef>
</project>